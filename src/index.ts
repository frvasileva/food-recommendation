import fs from "fs";
import path from "path";
import neo4j from "neo4j-driver";
import { neo4jgraphql, makeAugmentedSchema } from "neo4j-graphql-js";
// import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import express from "express";
import { ApolloServer } from "apollo-server-express";

// console.log({ bcrypt })

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */
const schemaFilePath = path.join(__dirname, "../src/schema.graphql");
const schema = makeAugmentedSchema({
	typeDefs: fs.readFileSync(schemaFilePath).toString("utf-8"),
	config: {
		auth: {
			isAuthenticated: true,
			hasRole: true,
		},
	},
	resolvers: {
		Mutation: {
			// Hash the password, insert a user via cypher and return a JWT
			registerUser: async (
				object: any,
				params: any,
				ctx: any,
				resolveInfo: any
			) => {
				// params.input.password = bcrypt.hashSync(params.input.password, 10);

				await neo4jgraphql(object, params, ctx, resolveInfo);
				return jwt.sign(
					{
						exp: Math.floor(Date.now() / 1000) + 60 * 6000,
						userId: params.input.id,
						email: params.input.email,
						friendlyUrl: params.input.friendlyUrl,
					},
					process.env.JWT_SECRET
				);
			},

			// Find the user by email via cypher and if passwords match return a JWT
			loginUser: async (
				object: any,
				params: any,
				ctx: any,
				resolveInfo: any
			) => {
				const result = await neo4jgraphql(object, params, ctx, resolveInfo);
				console.log("server result", result);
				const passwordIsCorrect =
					params.password === result.properties.password;

				if (!passwordIsCorrect) throw new Error("Invalid credentials");
				return jwt.sign(
					{
						exp: Math.floor(Date.now() / 1000) + 60 * 6000,
						userId: result.properties.id,
						email: result.properties.email,
						friendlyUrl: result.properties.friendlyUrl,
					},
					process.env.JWT_SECRET
				);
			},
			loginFacebookUser: async (
				object: any,
				params: any,
				ctx: any,
				resolveInfo: any
			) => {
				const result = await neo4jgraphql(object, params, ctx, resolveInfo);

				var token = jwt.sign(
					{
						exp: Math.floor(Date.now() / 1000) + 60 * 6000,
						userId: result.properties.id,
						email: result.properties.email,
						friendlyUrl: result.properties.friendlyUrl,
					},
					process.env.JWT_SECRET
				);
				return token;
			},
		},
	},
});

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const graphenedbURL = process.env.GRAPHENEDB_BOLT_URL;
const graphenedbUser = process.env.GRAPHENEDB_BOLT_USER;
const graphenedbPass = process.env.GRAPHENEDB_BOLT_PASSWORD;

// const NEO4J_CONNECTION = {
// 	heroku: {
// 		url: process.env.GRAPHENEDB_BOLT_URL,
// 		user: process.env.GRAPHENEDB_BOLT_USER,
// 		pass: process.env.GRAPHENEDB_BOLT_PASSWORD,
// 	},
// 	graphene: {
// 		url: "bolt://hobby-ophlmnchcpaogbkeobhgkdel.dbs.graphenedb.com:24787",
// 		user: "fani",
// 		pass: "b.7btxtg1eSy0P.wfToo9orPasdoJRV",
// 	},
// 	development: {
// 		url: "bolt://localhost:7687",
// 		user: "neo4j",
// 		pass: "parola",
// 	},
// };

// const credentials = NEO4J_CONNECTION.heroku;
// const driver = neo4j.driver(
// 	credentials.url,
// 	neo4j.auth.basic(credentials.user, credentials.pass),
// 	{ encrypted: "ENCRYPTION_OFF" }
// );

const driver = neo4j.driver(
	graphenedbURL,
	neo4j.auth.basic(graphenedbUser, graphenedbPass),
	{ encrypted: "ENCRYPTION_ON" }
);

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
	context: ({ req }) => {
		const bearerHeader = req.headers.authorization || "";
		const bearerToken = bearerHeader.split(" ")[1];
		const tokenPayload = bearerToken
			? (jwt.verify(bearerToken, process.env.JWT_SECRET) as any)
			: {};

		return {
			driver,
			req,
			cypherParams: {
				currentUserId: tokenPayload.userId,
			},
		};
	},
	schema,
});

const app = express();
server.applyMiddleware({ app, path: "/api" });

app.use(express.static(path.join(__dirname, "../ui/build")));
app.use("*", (req, res) => {
	res.sendFile(path.join(__dirname, "../ui/build", "index.html"));
});

app.listen(process.env.PORT || 4000);
console.log(`GraphQL API ready`);
