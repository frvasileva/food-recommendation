type Recipe {
	id: ID!
	name: String
	createdOn: String!
	preparationTime: Int
	skillLevel: String
	cookingTime: Int
	description: String
	friendlyUrl: String
	ingredients: [String]
		@cypher(
			statement: "MATCH (this)-[:CONTAINS_INGREDIENT]->(i:Ingredient) RETURN collect(i.name)"
		)
		@relation(name: "CONTAINS_INGREDIENT", direction: "OUT")
	collections: [String]
		@cypher(
			statement: "MATCH (this)-[:COLLECTION]->(c:Collection) RETURN collect(c.name)"
		)
		@relation(name: "COLLECTION", direction: "OUT")
	dietType: [String]
		@cypher(
			statement: "MATCH (this)-[:DIET_TYPE]->(d:DietType) RETURN collect(d.name)"
		)
		@relation(name: "DIET_TYPE", direction: "OUT")
	keyword: [String]
		@cypher(
			statement: "MATCH (this)-[:KEYWORD]->(k:Keyword) RETURN collect(k.name)"
		)
		@relation(name: "KEYWORD", direction: "OUT")
}

type Ingredient {
	id: ID!
	name: String
	friendlyUrl: String
	recipes: [Recipe] @relation(name: "CONTAINS_INGREDIENT", direction: "IN")
}

type Keyword {
	id: ID!
	friendlyUrl: String
	name: String
	recipes: [Recipe] @relation(name: "KEYWORD", direction: "IN")
}

type DietType {
	id: ID!
	friendlyUrl: String
	name: String
	recipes: [Recipe] @relation(name: "DIET_TYPE", direction: "IN")
}

type Collection {
	id: ID!
	name: String
	friendlyUrl: String
	recipes: [Recipe] @relation(name: "COLLECTION", direction: "IN")
}

type User {
	id: ID!
	username: String!
	name: String
	createdOn: String!
	avatarPath: String
	friendlyUrl: String!
	email: String!
	recipes: [Recipe] @relation(name: "CREATED", direction: "IN")
}

enum Role {
  reader
  user
  admin
}

input CreateRecipeInput {
	id: ID!
	name: String
	description: String
	preparationTime: Int
	skillLevel: String
	cookingTime: Int
	ingredients: [String]
	friendlyUrl: String
	userId: String
	createdOn: String
}

type Query {
	recipeByName(substring: String): [Recipe]
		@cypher(
			statement: "MATCH (r:Recipe) WHERE r.name CONTAINS $substring RETURN r"
		)

	recipeBySkillLevel(level: String): [Recipe]
		@cypher(statement: "MATCH (r:Recipe) WHERE r.skillLevel = $level RETURN r")

	recipeByPrearationTime(preparationTime: Int): [Recipe]
		@cypher(
			statement: "MATCH (r:Recipe) WHERE r.preparationTime = $preparationTime RETURN r"
		)

	recipeByPrearationTimeGraterThan(preparationTime: Int): [Recipe]
		@cypher(
			statement: "MATCH (r:Recipe) WHERE r.preparationTime >= $preparationTime RETURN r"
		)

	whatToCook(ingredient: [String], allergens: [String]): [Recipe]
		@cypher(
			statement: "MATCH (r:Recipe) WHERE all(i in $ingredient WHERE exists((r)-[:CONTAINS_INGREDIENT]->(:Ingredient {name: i}))) AND none(i in $allergens WHERE exists((r)-[:CONTAINS_INGREDIENT]->(:Ingredient {name: i}))) RETURN r"
		)
}

type Mutation {
	createRecipe(input: CreateRecipeInput): Recipe
		@cypher(
			statement: """
			CREATE (r:Recipe{id: $input.id, name: $input.name, description: $input.description, preparationTime: $input.preparationTime,
											 skillLevel: $input.skillLevel, cookingTime: $input.cookingTime, friendlyUrl: $input.friendlyUrl, createdOn: $input.createdOn})
			FOREACH (item in $input.ingredients |
				MERGE (i:Ingredient{name:item})
				CREATE (r)-[rel:CONTAINS_INGREDIENT]->(i)
			)
			WITH r
			MATCH (u:User{id:$input.userId})
			CREATE (u)-[rel:ADDED_RECIPE{createdOn: $input.createdOn}]->(r)
			RETURN r
			"""
		)
}
