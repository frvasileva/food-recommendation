type Recipe @isAuthenticated {
	id: ID!
	name: String
	imagePath: String
	createdOn: DateTime
	preparationTime: Int
	cookingTime: Int
	skillLevel: String
	description: String
	friendlyUrl: String
	ratings: Int
	nutritionInfo: String
	cusine: String
	ingredients: [Ingredient]
		@cypher(
			statement: "MATCH (this)-[rltn:CONTAINS_INGREDIENT]->(i:Ingredient) RETURN i"
		)
		@relation(name: "CONTAINS_INGREDIENT", direction: "OUT")
	dietType: [String]
		@cypher(
			statement: "MATCH (this)-[:DIET_TYPE]->(d:DietType) RETURN collect(d.name)"
		)
		@relation(name: "DIET_TYPE", direction: "OUT")
	keyword: [String]
		@cypher(
			statement: "MATCH (this)-[:KEYWORD]->(k:Keyword) RETURN collect(k.name)"
		)
		@relation(name: "KEYWORD", direction: "OUT")

	collections: [Collection] @relation(name: "RECIPE_ADDED_TO", direction: "OUT")
}

type recipeMapTuple {
	key: String
	value: String
}

type Ingredient {
	id: ID!
	name: String
	friendlyUrl: String
	quantity: String
		@cypher(
			statement: "MATCH (r:Recipe)-[rltn:CONTAINS_INGREDIENT]->(this) RETURN rltn.quantity"
		)
	quantityType: String
		@cypher(
			statement: "MATCH (r:Recipe)-[rltn:CONTAINS_INGREDIENT]->(this) RETURN rltn.quantityType"
		)
	recipes: [Recipe] @relation(name: "CONTAINS_INGREDIENT", direction: "IN")
}

type Keyword {
	id: ID!
	friendlyUrl: String
	name: String
	recipes: [Recipe] @relation(name: "KEYWORD", direction: "IN")
}

type DietType {
	id: ID!
	friendlyUrl: String
	name: String
	recipes: [Recipe] @relation(name: "DIET_TYPE", direction: "IN")
}

type Collection {
	id: ID!
	name: String
	friendlyUrl: String
	createdOn: String
	user: [User] @relation(name: "COLLECTION_CREATED", direction: "IN")
	recipes: [Recipe] @relation(name: "RECIPE_ADDED_TO", direction: "IN")
}

type User {
	id: ID!
	name: String
	createdOn: String!
	avatarPath: String
	friendlyUrl: String!
	email: String!
	password: String!
	recipes: [Recipe] @relation(name: "ADDED_RECIPE", direction: "OUT")
	collections: [Collection]
		@relation(name: "COLLECTION_CREATED", direction: "OUT")
	sessions: [Session] @relation(name: "SESSION_STARTED", direction: "IN")
	searchTerm: [SearchTerm] @relation(name: "TERM_SEARCHED", direction: "IN")
}

type Session {
	user: User! @relation(name: "SESSION_STARTED", direction: "OUT")
	startedOn: DateTime
}

type SearchTerm {
	user: User! @relation(name: "TERM_SEARCHED", direction: "OUT")
	createdOn: DateTime
	term: String!
}

enum Role {
	reader
	user
	admin
}

input IngredientType {
	name: String!
	quantity: String!
	quantityType: String!
}

input CreateRecipeInput {
	id: ID!
	name: String
	description: String
	preparationTime: Int
	skillLevel: String
	cookingTime: Int
	ingredients: [IngredientType]
	friendlyUrl: String
	userId: String
	createdOn: String
	ratings: Int
	nutritionInfo: String
}

input CreateCollectionInput {
	id: ID!
	name: String!
	friendlyUrl: String!
	userId: String!
	createdOn: String!
}

input AddRecipeToCollection {
	userId: ID!
	collectionId: ID!
	recipeId: ID!
	createdOn: String!
}

input RegisterUserInput {
	id: String!
	email: String!
	name: String!
	createdOn: String!
	friendlyUrl: String!
	password: String!
	defaultCollectionId: String!
}
input CreateSessionInput {
	userId: String!
}
input SetSearchInputInput {
	userId: String!
	term: String!
}

union SearchResult = Recipe | Ingredient

type Query {
	recipeByName(substring: String): [Recipe]
		@cypher(
			statement: "MATCH (r:Recipe) WHERE r.name CONTAINS $substring RETURN r"
		)

	recipeBySkillLevel(level: String): [Recipe]
		@cypher(statement: "MATCH (r:Recipe) WHERE r.skillLevel = $level RETURN r")

	recipeByPrearationTime(preparationTime: Int): [Recipe]
		@cypher(
			statement: "MATCH (r:Recipe) WHERE r.preparationTime = $preparationTime RETURN r"
		)

	recipeByPrearationTimeGraterThan(preparationTime: Int): [Recipe]
		@cypher(
			statement: "MATCH (r:Recipe) WHERE r.preparationTime >= $preparationTime RETURN r"
		)

	findSimiliarRecipe(recipeId: ID, limit: Int): [Recipe]
		@cypher(
			statement: """
			MATCH (p1:Recipe{id: $recipeId})-[r:CONTAINS_INGREDIENT]->(ingredient1:Ingredient)
			WITH p1, collect(id(ingredient1)) AS p1Ingredient
			MATCH (p2:Recipe)-[:CONTAINS_INGREDIENT]->(ingredient2:Ingredient)
			WHERE (p1 <> p2)
			WITH p1, p1Ingredient, p2, collect(id(ingredient2)) AS p2Ingredient

			RETURN p2,
						algo.similarity.jaccard(p1Ingredient, p2Ingredient) AS similarity
			ORDER BY similarity DESC
			LIMIT $limit
			"""
		)

	recipeList(
		ingredients: [String]
		allergens: [String]
		skip: Int
		limit: Int
	): [Recipe]
		@cypher(
			statement: """
			MATCH (r:Recipe)
			WHERE all(i in $ingredients WHERE exists((r)-[:CONTAINS_INGREDIENT]->(:Ingredient {name: i})))
			AND none(i in $allergens WHERE exists((r)-[:CONTAINS_INGREDIENT]->(:Ingredient {name: i})))
			RETURN r
			ORDER BY r.ratings desc
			SKIP $skip
			limit $limit
			"""
		)

	collectionsByUser(userId: String): [Collection]
		@cypher(
			statement: """
			MATCH (c:Collection)<-[r:COLLECTION_CREATED]-(u:User{id: $userId})
				return c
				order by c.createdOn desc
			"""
		)

	recipeFullTextSearch(
		term: String
		ingredients: [String]
		preparationTimeRange: [Int]
		cookingTimeRange: [Int]
		skillLevel: [String]
		skip: Int
		limit: Int
	): [Recipe]
		@cypher(
			statement: """
			CALL db.index.fulltext.queryNodes('RecipeTitleAndDescription', $term) YIELD node, score
			WITH node, score
			WHERE all(i in $ingredients WHERE exists((node)-[:CONTAINS_INGREDIENT]->(:Ingredient {name: i})))
			OPTIONAL MATCH (node)
			WHERE node.preparationTime in $preparationTimeRange
			OPTIONAL MATCH (node)
			WHERE node.cookingTime in $cookingTimeRange
			OPTIONAL MATCH (node)
			WHERE node.skillLevel in $skillLevel
			RETURN node
			ORDER BY score desc, node.ratings desc, node.preparationTime desc, node.cookingTime desc
			SKIP $skip
			LIMIT $limit
			"""
		)

	recipeAndProductFullTextSearch(searchTerm: String): [SearchResult]
		@cypher(
			statement: """
			CALL db.index.fulltext.queryNodes('titleAndIngredients', 'Banana pancakes')
			YIELD node, score
			RETURN node
			ORDER BY score DESC
			LIMIT 10
			"""
		)

	getRecipeOfTheDay: Recipe
		@cypher(
			statement: """
			MATCH (n:RecipeOfTheDay)
			RETURN n as Recipe
			LIMIT 1
			"""
		)

	getPredefinedSearchCategories: [Collection]
		@cypher(
			statement: """
			MATCH (n:PredefinedSearchCategory)
			RETURN n
			"""
		)

	getPopularCollections: [Collection]
		@cypher(
			statement: """
			MATCH (collection:Collection)<-[r:RECIPE_ADDED_TO]-(recipes:Recipe)
			RETURN collection, count(r)  as cnt
			order by cnt desc
			"""
		)

	getMostPopularIngredients: [Ingredient]
		@cypher(
			statement: """
			MATCH (mainProduct:MainProduct)
			RETURN mainProduct
			LIMIT 30
			"""
		)
}

type Mutation {
	createRecipe(input: CreateRecipeInput): Recipe
		@cypher(
			statement: """
			CREATE (r:Recipe{id: $input.id, name: $input.name, description: $input.description, preparationTime: $input.preparationTime,
											 skillLevel: $input.skillLevel, cookingTime: $input.cookingTime, friendlyUrl: $input.friendlyUrl, createdOn: datetime()})
			FOREACH (item in $input.ingredients |
				MERGE (i:Ingredient{name:item.name})
				CREATE (r)-[rel:CONTAINS_INGREDIENT{quantity: item.quantity, quantityType: item.quantityType}]->(i)
			)
			WITH r
			MATCH (u:User{id:$input.userId})
			CREATE (u)-[rel:ADDED_RECIPE{createdOn: $input.createdOn}]->(r)
			RETURN r
			"""
		)

	createCollection(input: CreateCollectionInput): Collection
		@cypher(
			statement: """
				CREATE (c:Collection{name:$input.name, friendlyUrl:$input.friendlyUrl, userId: $input.userId, id: $input.id, createdOn: datetime()})
			WITH c
			MATCH (u:User{id:$input.userId})
			MERGE (u)-[rel:COLLECTION_CREATED{createdOn:datetime()}]->(c)
			RETURN  c
			"""
		)

	createUserSession(input: CreateSessionInput): String
		@cypher(
			statement: """
			CREATE (s:Session{createdOn:datetime()})
			WITH s
			MATCH (u:User{id:$input.userId})
			CREATE (u)-[rel:SESSION_STARTED]->(s)
			RETURN u.id
			"""
		)

	createSearchTerm(input: SetSearchInputInput): SearchTerm
		@cypher(
			statement: """
			CREATE (s:SearchedTerm{createdOn:datetime(), term: $input.term})
			WITH s
			MATCH (u:User{id:$input.userId})
			CREATE (u)-[rel:TERM_SEARCHED]->(s)
			RETURN s
			"""
		)

	addRecipeToACollection(input: AddRecipeToCollection): Collection
		@cypher(
			statement: """
			MATCH (r:Recipe{id:$input.recipeId})
			WITH r
			MATCH (c:Collection{id:$input.collectionId})
			CREATE (r)-[rel:RECIPE_ADDED_TO{userId:$input.userId, createdOn:$input.createdOn}]->(c)
			return c
			"""
		)

	removeRecipeFromCollection(input: AddRecipeToCollection): Collection
		@cypher(
			statement: """
			MATCH (r:Recipe{id:$input.recipeId})-[rel:RECIPE_ADDED_TO]->(c:Collection{id:$input.collectionId})
			DELETE rel
			RETURN c
			"""
		)

	setRecipeOfTheDay(recipeId: String): Recipe
		@cypher(
			statement: """
			MATCH (n { id: $recipeId })
			SET n:RecipeOfTheDay
			RETURN n
			"""
		)
	setMainProduct(ingredientId: String): Recipe
		@cypher(
			statement: """
			MATCH (n:Ingredient { name: $ingredientId })
			SET n:MainProduct
			RETURN n
			"""
		)

	setPredefinedSearchCategory(friendlyUrl: String): Collection
		@cypher(
			statement: """
			MATCH (n { friendlyUrl: $friendlyUrl })
			SET n:PredefinedSearchCategory
			RETURN n
			"""
		)

	loginUser(email: String, password: String): String
		@cypher(
			statement: """
			MATCH (u:User{email:$email})
			return u
			"""
		)

	registerUser(input: RegisterUserInput): String
		@cypher(
			statement: """
			CREATE (c:Collection{id:$input.defaultCollectionId, name:\"Want to cook\", friendlyUrl:\"want-to-cook\", createdOn:$input.createdOn})
			WITH c
			CREATE (u:User {id:$input.id, email:$input.email, name: $input.name, createdOn:$input.createdOn, friendlyUrl:$input.friendlyUrl, password:$input.password})
			WITH u, c
			CREATE (u)-[rel:COLLECTION_CREATED]->(c)
			return u.name
			"""
		)
}
