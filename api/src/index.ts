import fs from "fs";
import path from "path";
import { ApolloServer } from "apollo-server";
import neo4j from "neo4j-driver";
import { neo4jgraphql, makeAugmentedSchema } from "neo4j-graphql-js";
// import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

// console.log({ bcrypt })

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */
const schemaFilePath = path.join(__dirname, "schema.graphql");
const schema = makeAugmentedSchema({
	typeDefs: fs.readFileSync(schemaFilePath).toString("utf-8"),
	config: {
		auth: {
			isAuthenticated: true,
			hasRole: true
		}
	},
	resolvers: {
		Mutation: {
			// Hash the password, insert a user via cypher and return a JWT
			RegisterUser: async (
				object: any,
				params: any,
				ctx: any,
				resolveInfo: any
			) => {
				// params.input.password = bcrypt.hashSync(params.input.password, 10);
				await neo4jgraphql(object, params, ctx, resolveInfo);
				return jwt.sign({
					exp: Math.floor(Date.now() / 1000) + (60 * 60),
					userId: params.input.id
					}, process.env.JWT_SECRET);
			},

			// Find the user by email via cypher and if passwords match return a JWT
			LoginUser: async (
				object: any,
				params: any,
				ctx: any,
				resolveInfo: any
			) => {
				const result = await neo4jgraphql(object, params, ctx, resolveInfo);
				const passwordIsCorrect = params.password === result.properties.password;
				// const passwordIsCorrect = bcrypt.compareSync(
				// 	params.password,
				// 	result.properties.password
				// );
				if (!passwordIsCorrect) throw new Error("Invalid credentials");
				return jwt.sign(
					{
						exp: Math.floor(Date.now() / 1000) + 60 * 60,
						userId: result.properties.id
					},
					process.env.JWT_SECRET
				);
			}
		}
	}
});

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
	"bolt://localhost:7687",
	neo4j.auth.basic("neo4j", "parola")
);

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
	context: ({ req }) => {
		const bearerHeader = req.headers.authorization || "";
		const bearerToken = bearerHeader.split(" ")[1];
		const tokenPayload = bearerToken
			? jwt.verify(bearerToken, process.env.JWT_SECRET) as any
			: {};

		return {
			driver,
			req,
			cypherParams: {
				currentUserId: tokenPayload.userId
			}
		};
	},
	schema
});

server.listen(4000).then(({ url }) => {
	console.log(`GraphQL API ready at ${url}`);
});
